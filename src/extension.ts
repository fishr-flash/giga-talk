import * as vscode from 'vscode';

let debounceTimer: NodeJS.Timeout | undefined;

import { GigaChatInlineProvider } from './inlineCompletion';
import { getOutputChannel } from './output';

import * as dotenv from 'dotenv';
import path from 'path';

dotenv.config({
  path: path.resolve(__dirname, '../.env'),
});

export function activate(context: vscode.ExtensionContext) {
  // –ø–æ–∫–∞–∑–∞—Ç—å Output –∫–∞–Ω–∞–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  const outputChannel = getOutputChannel();
  
  
  outputChannel.show(true); // –û—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  outputChannel.appendLine("üöÄ GigaChat Extension Activated");
  outputChannel.appendLine(`process.env.LANG_API_URL: ${process.env.LANG_API_URL}`);
  outputChannel.appendLine(`__dirname ${__dirname}`);

  context.subscriptions.push(
    vscode.languages.registerInlineCompletionItemProvider(
      "*", // –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–∞ js/ts
      new GigaChatInlineProvider()
    )
  );
  const disposable = vscode.workspace.onDidChangeTextDocument((event) => {
    const editor = vscode.window.activeTextEditor;
    if (!editor || event.document !== editor.document) return;

    // –°–±—Ä–æ—Å–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (debounceTimer) clearTimeout(debounceTimer);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä (1.5 —Å–µ–∫)
    debounceTimer = setTimeout(() => {
      const code = editor.document.getText();
      sendToGigaChat(code);
    }, 3000);
  });

  context.subscriptions.push(disposable);
}

export function deactivate() {}

function sendToGigaChat(text: string) {
  const apiUrl = 'https://example.com/gigachat'; // ‚Üê –ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π endpoint
  const token = 'your-token'; // ‚Üê –õ—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ `settings.json`

  fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      message: text,
    }),
  })
    .then(res => res.json())
    .then(data => {
      console.log('‚úÖ GigaChat –æ—Ç–≤–µ—Ç:', data);
      // –ú–æ–∂–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ —Ç.–ø.
    })
    .catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ GigaChat:', err);
    });
}
